import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import os
import time
from PyPDF2 import PdfReader

from pathlib import Path
import hashlib


load_dotenv()

# Carregando as instru√ß√µes do sistema para o Gemini
system_instruction = """
Seu nome √© Ana, uma assistente virtual que ajuda um usu√°rio a preparar um curr√≠culo.
Voc√™ deve fornecer feedback sobre o curr√≠culo de um usu√°rio.
Voc√™ ir√° receber a vaga que o usu√°rio deseja e o curr√≠culo atual dele em formato PDF.
Voc√™ deve analisar o curr√≠culo e fornecer feedbacks construtivos para o usu√°rio melhorar o curr√≠culo dele.
E no final, evidencie uma nota de 0 a 10 para o curr√≠culo dele.
Sempre que fornecer um feedback, forne√ßa uma sugest√£o de melhoria com os pontos positivos e negativos.
"""

# Configurando a API para o modelo Gemini
genai.configure(api_key=os.getenv("gemini_api_key"))

# Inicializando o modelo Gemini (gemini-1.5-pro-latest)
model = genai.GenerativeModel(
    model_name="gemini-1.5-pro-latest",
    system_instruction=system_instruction
)


def text_from_pdf(pdf):
    text = ""
    pdf_reader = PdfReader(pdf)
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text



# T√≠tulo da p√°gina
st.title('Produ√ß√£o de Curr√≠culo üìÑ')


st.write("Envie seu curr√≠culo atual e vaga desejada para receber feedbacks construtivos sobre o seu curr√≠culo.")

# Upload do curr√≠culo
st.write("Por favor, fa√ßa o upload do seu curr√≠culo atual em formato PDF")
cv = st.file_uploader("Upload do curr√≠culo", type=['pdf'])

# Bot√µes de a√ß√£o
if cv is not None:
    with st.spinner('Carregando curr√≠culo...'):
        text = text_from_pdf(cv)
    st.success('Curr√≠culo carregado com sucesso!')
    vaga = st.text_input('Qual vaga voc√™ deseja se candidatar? Seja o mais espec√≠fico poss√≠vel.')
    if vaga:
        initial_message = f"Ol√° Ana, gostaria de me candidatar para a vaga de {vaga}. Aqui est√° o meu curr√≠culo atual {text}."
        button = st.button('Enviar')
        if button:
            with st.spinner("Processando..."):
                ai_query = model.generate_content(initial_message)
                st.markdown(ai_query.text)

    else:
        st.warning('Por favor, preencha o campo da vaga antes de continuar.')
else:
    st.warning('Por favor, fa√ßa o upload do seu curr√≠culo antes de continuar.')
